generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  ADMIN
  USER
}

model User {
  id           Int      @id @unique @default(autoincrement())
  name         String?
  email        String   @unique
  role         Role     @default(USER)
  password     String? // in case of google auth, password is not needed
  profileImage String?
  designation   String?
  social Json[] //array of json object
  contactNumber String?
  about       String?
  status      String?
  journals Journal_Paper[]
  conferencePapers Conference_Paper[]
  bookChapters Book_Chapter[]
  books Book[]
  patents Patent[]
  projects Project[]
  createdAt    DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model ResearchArea {
  id          Int      @unique @default(autoincrement())
  name        String
  description String
  imageURL    String
  createdAt   DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model ResearchFacility {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  imageURL    String?
  createdAt   DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

// Journal Papers : Title	Authors	Journal	Volume	Year	Publication Date	Quartile	DOI
model Journal_Paper{
  id         Int      @id @unique @default(autoincrement())
  title      String
  authors  User[]
  journal    String
  volume     String?
  year       Int
  publicationDate DateTime?
  quartile   String?
  doi        String?
  createdAt  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
// Conference Papers: Title	Authors	Conference	Location	Year	Pages	Indexing DOI
model Conference_Paper {
  id         Int      @id @unique @default(autoincrement())
  title      String
  authors    User[]
  conference String
  location   String?
  year       Int
  pages      String?
  indexing   String?
  doi        String?
  createdAt  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
// Book Chapters : Chapter Title	Book Title	Authors	Scopus	DOI	Publisher	Year
model Book_Chapter {
  id         Int      @id @unique @default(autoincrement())
  chapterTitle String
  bookTitle  String
  authors    User[]
  scopus     String?
  doi        String?
  publisher  String?
  year       Int
  createdAt  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
//Books : Title	Authors	Publisher	Scopus	DOI	ISBN	Year
model Book {
  id         Int      @id @unique @default(autoincrement())
  title      String
  authors    User[]
  publisher  String?
  scopus     String?
  doi        String?
  isbn       String?
  year       Int
  createdAt  DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
//Projects: Title	Agency	Role	Outlay (â‚¹)	Duration	PI Institute	Status	Funds Received
model Project {
  id          Int      @id @unique @default(autoincrement())
  title       String
  agency      String
  role        String
  outlay      Float
  duration    String
  pi User @relation(fields: [piInstitute], references: [id], onDelete: Cascade)
  piInstitute Int
  status      String
  fundsReceived Float?
  createdAt   DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}
//Patents : Title	Type	Grant No	Grant Date	Publication Date	Inventors
model Patent {
  id          Int      @id @unique @default(autoincrement())
  title       String
  type        String
  grantNo     String
  grantDate   DateTime?
  publicationDate DateTime?
  inventors  User[]
  createdAt   DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Outreach {
  id          Int      @id @unique @default(autoincrement())
  outreach    String
  description String
  createdAt   DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Event {
  id          Int      @id @unique @default(autoincrement())
  event       String
  description String
  imageURL    String
  createdAt   DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Highlight{
  id Int @unique @id @default(autoincrement())
  highlight String
  description String
  link String?
  date String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RecentUpdate{
  id Int @unique @id @default(autoincrement())
  update String
  description String
  link String?
  date String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PhotoGallery {
  id        Int      @id @unique @default(autoincrement())
  imageURL  String
  tags      String[]
  groupMoment Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}